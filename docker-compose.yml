version: '3.8'

services:
  # Frontend Vue.js application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: starflare-frontend
    ports:
      - '3000:80'
    environment:
      - NODE_ENV=production
    networks:
      - starflare-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:80'
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Mock backend for local development (simulates Cloudflare Functions)
  backend:
    image: node:16-alpine
    container_name: starflare-backend
    working_dir: /app
    volumes:
      - ./functions:/app/functions
      - ./package.json:/app/package.json
      - ./yarn.lock:/app/yarn.lock
    ports:
      - '7001:7001'
    environment:
      - NODE_ENV=development
      - PORT=7001
      # GitHub OAuth credentials (set these in .env file)
      - CLIENT_ID=${GITHUB_CLIENT_ID:-your_github_client_id}
      - CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-your_github_client_secret}
    command: >
      sh -c "
        yarn install --frozen-lockfile &&
        node -e \"
          const http = require('http');
          const url = require('url');
          
          // Mock Cloudflare Functions API
          const server = http.createServer(async (req, res) => {
            res.setHeader('Access-Control-Allow-Origin', '*');
            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
            res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
            
            if (req.method === 'OPTIONS') {
              res.writeHead(200);
              res.end();
              return;
            }
            
            const parsedUrl = url.parse(req.url, true);
            
            if (parsedUrl.pathname === '/api/getToken') {
              const code = parsedUrl.query.code;
              
              if (!code) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Missing code parameter' }));
                return;
              }
              
              try {
                // Mock GitHub OAuth token exchange
                const tokenResponse = {
                  access_token: 'mock_access_token_' + Date.now(),
                  token_type: 'bearer',
                  scope: 'public_repo,read:user'
                };
                
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify(tokenResponse));
              } catch (error) {
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Internal server error' }));
              }
            } else {
              res.writeHead(404, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify({ error: 'Not found' }));
            }
          });
          
          server.listen(7001, '0.0.0.0', () => {
            console.log('Mock backend server running on port 7001');
          });
        \"
      "
    networks:
      - starflare-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:7001'
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: starflare-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-starflare_redis_pass}
    networks:
      - starflare-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  starflare-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
